
/**
 * DSS - Digital Signature Services
 * Copyright (C) 2015 European Commission, provided under the CEF programme
 *
 * This file is part of the "DSS - Digital Signature Services" project.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */
package eu.europa.esig.dss.wsclient.validation;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * The validation web service allows to validate any kind of signature form. The validation process is based on ETSI TS 102853 and is driven by the validation policy containing a set of rules. As result three states can be returned: VALID, INDETERMINATE OR INVALID. These states are accompanied by sub-indications and some other information. The result is represented through three reports: simple validation report with the final result, detailed validation report with the result of each rule and the diagnostic data.
 *
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.6 in JDK 6
 * Generated source version: 2.1
 *
 */
@WebService(name = "ValidationService", targetNamespace = "http://ws.dss.esig.europa.eu/")
@XmlSeeAlso({
	ObjectFactory.class
})
public interface ValidationService {


	/**
	 * This method validates the document containing the signature(s). It takes four parameters: document with signature(s), the signed document in case of detached signature (can be null), the document containing the specific validation policy (default policy is used when null) and a flag to say if diagnostic data must be returned by the method.
	 *
	 * @param document
	 * @param diagnosticDataToBeReturned
	 * @param detachedContent
	 * @param policy
	 * @return
	 *     returns eu.europa.esig.dss.wsclient.validation.WsValidationReport
	 * @throws DSSException_Exception
	 */
	@WebMethod
	@WebResult(name = "response", targetNamespace = "")
	@RequestWrapper(localName = "validateDocument", targetNamespace = "http://ws.dss.esig.europa.eu/", className = "eu.europa.esig.dss.wsclient.validation.ValidateDocument")
	@ResponseWrapper(localName = "validateDocumentResponse", targetNamespace = "http://ws.dss.esig.europa.eu/", className = "eu.europa.esig.dss.wsclient.validation.ValidateDocumentResponse")
	public WsValidationReport validateDocument(
			@WebParam(name = "document", targetNamespace = "")
			WsDocument document,
			@WebParam(name = "detachedContent", targetNamespace = "")
			WsDocument detachedContent,
			@WebParam(name = "policy", targetNamespace = "")
			WsDocument policy,
			@WebParam(name = "diagnosticDataToBeReturned", targetNamespace = "")
			boolean diagnosticDataToBeReturned)
					throws DSSException_Exception
					;

}
