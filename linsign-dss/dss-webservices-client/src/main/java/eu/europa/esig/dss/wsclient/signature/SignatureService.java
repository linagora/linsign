
package eu.europa.esig.dss.wsclient.signature;


import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

import eu.europa.esig.dss.wsclient.signature.ObjectFactory;
import eu.europa.esig.dss.wsclient.signature.WsChainCertificate;
import eu.europa.esig.dss.wsclient.signature.WsDocument;
import eu.europa.esig.dss.wsclient.signature.WsParameters;
import eu.europa.esig.dss.wsclient.signature.WsSignaturePolicy;

/**
 * The signing web service allows to create a new signature or to extend existing one. Different forms of signature:XAdES, CAdES, PAdES, ASiC-S are accepted.
 *  The digital signature of a document in a web environment is performed in three steps:
 *  1. Creating a byte stream representing the data to be signed.
 *  2. Hashing of the data previously obtained and its encryption. This step is performed locally (not by the web service).
 *  3. The creation of the envelope containing all the elements of a digital signature.
 *  The process is controlled by a set of parameters.
 * 
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.6 in JDK 6
 * Generated source version: 2.1
 * 
 */
@WebService(name = "SignatureService", targetNamespace = "http://ws.dss.esig.europa.eu/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface SignatureService {


    /**
     * This method return a result on the certificate verification . It takes one parameter: certificate tyo verify.
     * 
     * @param certificate
     * @return
     *     returns java.lang.String
     * @throws DSSException
     */
    @WebMethod
    @WebResult(name = "response", targetNamespace = "")
    @RequestWrapper(localName = "checkCertificate", targetNamespace = "http://ws.dss.esig.europa.eu/", className = "eu.europa.esig.dss.wsclient.signature.CheckCertificate")
    @ResponseWrapper(localName = "checkCertificateResponse", targetNamespace = "http://ws.dss.esig.europa.eu/", className = "eu.europa.esig.dss.wsclient.signature.CheckCertificateResponse")
    public String checkCertificate(
        @WebParam(name = "certificate", targetNamespace = "")
        WsChainCertificate certificate)
        throws DSSException_Exception
    ;

    /**
     * This method creates the signature containing the provided encrypted hash value and all requested elements. It requests three parameters: the document to sign, the set of driving parameters and the encrypted hash value of bytes that need to be protected by the digital signature.
     * 
     * @param document
     * @param signatureValue
     * @param wsParameters
     * @return
     *     returns eu.europa.esig.dss.ws.WsDocument
     * @throws DSSException
     */
    @WebMethod
    @WebResult(name = "response", targetNamespace = "")
    @RequestWrapper(localName = "signDocument", targetNamespace = "http://ws.dss.esig.europa.eu/", className = "eu.europa.esig.dss.wsclient.signature.SignDocument")
    @ResponseWrapper(localName = "signDocumentResponse", targetNamespace = "http://ws.dss.esig.europa.eu/", className = "eu.europa.esig.dss.wsclient.signature.SignDocumentResponse")
    public WsDocument signDocument(
        @WebParam(name = "document", targetNamespace = "")
        WsDocument document,
        @WebParam(name = "wsParameters", targetNamespace = "")
        WsParameters wsParameters,
        @WebParam(name = "signatureValue", targetNamespace = "")
        byte[] signatureValue)
        throws DSSException_Exception
    ;

    /**
     * This method Extends the level of the signature(s) linked to the given document. It takes two parameters: the document with the signature(s), the set of driving parameters.
     * 
     * @param signedDocument
     * @param wsParameters
     * @return
     *     returns eu.europa.esig.dss.ws.WsDocument
     * @throws DSSException
     */
    @WebMethod
    @WebResult(name = "response", targetNamespace = "")
    @RequestWrapper(localName = "extendSignature", targetNamespace = "http://ws.dss.esig.europa.eu/", className = "eu.europa.esig.dss.wsclient.signature.ExtendSignature")
    @ResponseWrapper(localName = "extendSignatureResponse", targetNamespace = "http://ws.dss.esig.europa.eu/", className = "eu.europa.esig.dss.wsclient.signature.ExtendSignatureResponse")
    public WsDocument extendSignature(
        @WebParam(name = "signedDocument", targetNamespace = "")
        WsDocument signedDocument,
        @WebParam(name = "wsParameters", targetNamespace = "")
        WsParameters wsParameters)
        throws DSSException_Exception
    ;

    /**
     * This method retrieves the stream of data that need to be hashed and encrypted. It takes two parameters: the document to sign and the set of parameters.
     * 
     * @param document
     * @param wsParameters
     * @return
     *     returns byte[]
     * @throws DSSException
     */
    @WebMethod
    @WebResult(name = "response", targetNamespace = "")
    @RequestWrapper(localName = "getDataToSign", targetNamespace = "http://ws.dss.esig.europa.eu/", className = "eu.europa.esig.dss.wsclient.signature.GetDataToSign")
    @ResponseWrapper(localName = "getDataToSignResponse", targetNamespace = "http://ws.dss.esig.europa.eu/", className = "eu.europa.esig.dss.wsclient.signature.GetDataToSignResponse")
    public byte[] getDataToSign(
        @WebParam(name = "document", targetNamespace = "")
        WsDocument document,
        @WebParam(name = "wsParameters", targetNamespace = "")
        WsParameters wsParameters)
        throws DSSException_Exception
    ;

    /**
     * This method return a result on signature policy . It takes one parameter : name of policy.
     * 
     * @param policy
     * @return
     *     returns eu.europa.esig.dss.ws.WsSignaturePolicy
     * @throws DSSException
     */
    @WebMethod
    @WebResult(name = "response", targetNamespace = "")
    @RequestWrapper(localName = "getSignaturePolicy", targetNamespace = "http://ws.dss.esig.europa.eu/", className = "eu.europa.esig.dss.wsclient.signature.GetSignaturePolicy")
    @ResponseWrapper(localName = "getSignaturePolicyResponse", targetNamespace = "http://ws.dss.esig.europa.eu/", className = "eu.europa.esig.dss.wsclient.signature.GetSignaturePolicyResponse")
    public WsSignaturePolicy getSignaturePolicy(
        @WebParam(name = "policy", targetNamespace = "")
        String policy)
        throws DSSException_Exception
    ;    
}
